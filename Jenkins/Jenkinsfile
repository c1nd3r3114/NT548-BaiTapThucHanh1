pipeline {
    agent any

    triggers {
        // Tự động trigger khi có commit mới trên repository
        pollSCM('* * * * *') 
    }

    environment {
        DOCKER_IMAGE = "hunger1607/c1nd3r-webapp"
        SONARQUBE_SERVER = "http://localhost:9000"
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                echo "Checking out the source code..."
                checkout scm
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv(env.SONARQUBE_SERVER) {
                        sh """
                        ./mvnw sonar:sonar \
                            -Dsonar.projectKey=my-microservice \
                            -Dsonar.host.url=$SONAR_HOST_URL \
                            -Dsonar.login=$SONAR_AUTH_TOKEN
                        """
                    }
                }
            }
        }

stage('Build Docker Image') {
    steps {
        script {
            // Tạo các biến tag
            def versionTag = "v1.0-${env.BUILD_NUMBER}" // Sử dụng số build làm phiên bản
            def commitHash = env.GIT_COMMIT?.take(7) // Sử dụng 7 ký tự đầu của commit hash
            def timestamp = new Date().format("yyyyMMdd-HHmmss", TimeZone.getTimeZone('UTC'))

            // Gắn tag cuối cùng cho image
            def dockerTag = "${DOCKER_IMAGE}:${versionTag}-${commitHash}-${timestamp}"
            env.DOCKER_TAG = dockerTag // Lưu tag để sử dụng trong các bước tiếp theo

            echo "Building Docker image with tag: ${dockerTag}"

            // Build Docker image với tag mới
            sh "docker build -t ${dockerTag} ."
        }
    }
}

        stage('Scan Docker Image with Trivy') {
            steps {
                echo "Scanning Docker image with Trivy..."
                sh """
                trivy image --severity HIGH,CRITICAL ${DOCKER_IMAGE}:latest || exit 1
                """
            }
        }

        stage('Run Tests in Docker') {
            steps {
                echo "Running tests in Docker..."
                sh """
                docker run --rm ${DOCKER_IMAGE}:latest \
                sh -c 'java -jar /app/tests.jar'
                """
            }
        }

        stage('Deploy to Local Docker') {
            steps {
                echo "Deploying application to local Docker..."
                sh """
                docker stop ${DOCKER_IMAGE} || true
                docker rm ${DOCKER_IMAGE} || true
                docker run -d --name ${DOCKER_IMAGE} -p 8080:8080 ${DOCKER_IMAGE}:latest
                """
            }
        }
    }

    post {
        always {
            echo "Cleaning up Docker environment..."
            sh """
            docker system prune -f
            """
        }

        success {
            echo "Pipeline executed successfully."
        }

        failure {
            echo "Pipeline failed. Please check the logs."
        }
    }
}
